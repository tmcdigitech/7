<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>7 Digital Tech – Getting started</title><link>https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/</link><description>Recent content in Getting started on 7 Digital Tech</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/index.xml" rel="self" type="application/rss+xml"/><item><title>Microcontrollers: Setup</title><link>https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/setup/</guid><description>
&lt;p>The first time you connect your Pico it likely won&amp;rsquo;t have any firmware on it. We will download firmware to allow us to use CircuitPython. Download this file, and then drag it onto your pico device to copy it across (it will be installed automatically).&lt;/p>
&lt;p>&lt;a href="adafruit-circuitpython-raspberry_pi_pico-en_US-8.0.4.uf2">Download firmware&lt;/a>&lt;/p>
&lt;p>Once you&amp;rsquo;ve done that you will see
&lt;a href="neopixel.mpy">neopixel.mpy&lt;/a>
&lt;a href="simpleio.mpy">simpleio.mpy&lt;/a>&lt;/p></description></item><item><title>Microcontrollers: Software</title><link>https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/installation/</guid><description>
&lt;p>To program you Gemma M0 or other CircuitPython compatible hardware, you will need to either:&lt;/p>
&lt;ol>
&lt;li>use Mu, or&lt;/li>
&lt;li>use another editor&lt;/li>
&lt;/ol>
&lt;p>Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generally very friendly to use and has a lot of features to help beginners get started. It also includes a Serial Monitor, meaning Mu will automatically display information
sent back from your Gemma.&lt;/p>
&lt;p>After you have been writing code for a while, you may find that a more powerful text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of complexity, and possibly doing some more basic things yourself.&lt;/p>
&lt;h2 id="using-mu">Using Mu&lt;/h2>
&lt;p>Install &lt;em>Mu&lt;/em>, using the Company Portal (on a school computer), or from &lt;a href="https://codewith.mu/">the website&lt;/a>.&lt;/p>
&lt;p>To program your Gemma M0, make sure you select the mode &lt;em>CircuitPython&lt;/em> (depending on your version, it may be called something slightly different,
but it is the mode with &amp;lsquo;CircuitPython&amp;rsquo; somewhere in the title).&lt;/p>
&lt;h2 id="using-visual-studio-code">Using Visual Studio Code&lt;/h2>
&lt;p>Install &lt;em>Visual Studio Code&lt;/em> from the Company Portal (on a school computer), or from &lt;a href="https://code.visualstudio.com/">the website&lt;/a>.&lt;/p></description></item><item><title>Microcontrollers: Structuring your files</title><link>https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/filestructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/7/microcontrollers/01gettingstarted/filestructure/</guid><description>
&lt;p>When you plug your Gemma in to your computer, it will appear as a USB drive (probably D:, unless you&amp;rsquo;ve got something else already plugged in).
If you open the Gemma, you&amp;rsquo;ll see a file called &lt;code>code.py&lt;/code> or &lt;code>main.py&lt;/code>. This is the file that your Gemma will run.
To change the program your Gemma is running, just edit this file!&lt;/p>
&lt;pre tabindex="0">&lt;code>D:/
├── code.py # on newer versions
├── main.py # on older versions
│
└── lib/
└── ... # library files, which tell the software how to control hardware we might connect
&lt;/code>&lt;/pre></description></item></channel></rss>